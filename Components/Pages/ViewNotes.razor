@using InteractiveGameManual.Model
@using InteractiveGameManual.Services
@inject NoteService Notes
@page "/note/"
@page "/note/{noteName}"

<div>
    @if (noteName == "" || noteName == null){
        <p>invalid note please go back and try again</p>
    }
    else{
        foreach (var note in Notes.AllNotes){
            if (noteName == note.Title){
                Note = note;
                <h1>@note.Title</h1>
                <p>@note.Text</p>
                if (note.Refrences != null && note.Refrences.Count > 0){
                    foreach (var refrence in note.Refrences){
                        <li>
                            <a href="/details/@refrence">@refrence</a>
                        </li>
                    }
                }
            }
        }
        <br>
        <div class="row">
            @if (!editNote){
                <div class="col-md-12">
                    <button @onclick=EditNote>EditNote</button>
                </div>
            }
            else{
                <div class="col-md-12">
                    Edit Title: <input @bind=title>
                    <br>
                    Edit Text: <input @bind=text>
                    @if (title == null || title == ""){
                        <button @onclick=SaveChanges><a href="/note/@Note.Title" style="color: black; text-decoration: none;">SaveChanges</a></button>
                    }
                    else{
                        <button @onclick=SaveChanges><a href="/note/@title" style="color: black; text-decoration: none;">SaveChanges</a></button>
                    }
                </div>
            }
        </div>
        <br>
        <div>
            @if (Note != null && Note.Refrences != null){
                <label for="Refrence">Choose a reference to delete from @Note.Title:</label>
                <select @bind=selectedReference name="Refrence" id="refrence">
                    @foreach (var refrence in Note.Refrences){
                        <option value="@refrence">@refrence</option>
                    }
                </select>
                <br>
                <button @onclick="DeleteRefrence">Delete Reference</button>
            }
        </div>
    }


    <br>
    <a href="/notes">go back</a>
</div>

@code {
    /// <summary>
    /// The parameter for any note being viewed
    /// </summary>
    [Parameter]
    public string? noteName {get; set;}
    /// <summary>
    /// The note being viewed
    /// </summary>
    Note? Note {get; set;}
    /// <summary>
    /// title to be changed for the note
    /// </summary>
    public string? title {get; set;}
    /// <summary>
    /// Text to be changed for the note
    /// </summary>
    public string? text {get; set;}
    /// <summary>
    /// used to hide the editNote button
    /// </summary>
    bool editNote = false;
    /// <summary>
    /// Selected refrence to delete
    /// </summary>
    public string? selectedReference {get; set;}
    /// <summary>
    /// Changes <see cref="editNote"> to true when edit note button is pressed
    /// </summary>
    public void EditNote(){
        editNote = true;
    }
    /// <summary>
    /// Saves the changes made to the note
    /// Checks the title if its null or empty sets the note title to its original title
    /// Then changes teh note and clears the title and text and sets editnote to false
    /// </summary>
    public async Task SaveChanges(){
        if (title != "" && title != null){
            Note.Title = title;
            if (text != "" && text != null){
                Note.Text = text;
            }
        }
        else{
            title = Note?.Title;
            if (text != "" && text != null){
                Note.Text = text;
            }
        }
        title = "";
        text = "";
        editNote = false;
    }
    /// <summary>
    /// Deletes the selected refrence to delete
    /// Checks if the refrence is not null or empty and the list is above 0 if so deletes the refrence
    /// if its null or empty and above 0 sets to refrences list at 0 and deletes it and then clears selectedRefrence 
    /// </summary>
    public async Task DeleteRefrence(){
        string referenceToDelete = selectedReference;
        if (referenceToDelete != null && referenceToDelete != ""){
            if (Note?.Refrences?.Count > 0){
                Note.Refrences.Remove(referenceToDelete);
            }
        }
        else{
            if (Note?.Refrences?.Count > 0){
                referenceToDelete = Note.Refrences[0];
                Note.Refrences.Remove(referenceToDelete);
            }
        }
        selectedReference = "";
    }
}