@using InteractiveGameManual.Model
@using InteractiveGameManual.Services
@inject NoteService notes
@inject WeaponService weapons
@inject PotionService potions
@inject MonsterService monster
@inject PlayerService player

@page "/notes"

<div class="row">
    <div class="col-md-12">
        <ul>
            @foreach (var note in notes.AllNotes){
                <li>
                    <a href="note/@note.Title">@note.Title</a>
                    <ul>
                        @if (note.Refrences != null && note.Refrences.Count > 0){
                            foreach (var refrence in note.Refrences){
                                <li>
                                    <a href="/details/@refrence">@refrence</a>
                                </li>
                            }
                        }
                    </ul>
                </li>
            }
        </ul>
        <div>
            <h1>Create Note</h1>
            Title: <input @bind=title><br>
            <br>
            Text: <input @bind=text><br>
            <br>
            <button @onclick=MakeNote>Make Note</button>
        </div>
        <br>
        <div>
            <h1>Add refrences</h1>
            <label for="NoteForRefrence">Title of note to add refrence to:</label>
            <select @bind=noteForRefrence name="NoteForRefrence" id="NoteForRefrence">
                @foreach (var note in notes.AllNotes){
                    <option value="@note.Title">@note.Title</option>
                }
            </select>
            <br>
            <label for="Refrence">Choose a refrence to add to selected note:</label>
            <select @bind=selectedRefrence name="Refrence" id="refrence">
                @foreach (var refrence in notes.AllRefrences){
                    <option value="@refrence">@refrence</option>
                }
            </select>
            <br>
            <button @onclick=AddRefrence>Add Refrence</button>
        </div>
        <br>
        <div>
            <h1>Delete Note</h1>
            <label for="NoteToDelete">Title of note to delete</label>
            <select @bind=noteTitle name="NoteToDelete" id="NoteToDelete">
                @foreach (var note in notes.AllNotes){
                    <option value="@note.Title">@note.Title</option>
                }
            </select>
            <br>
            <button @onclick=DeleteNote>DeleteNote</button>
        </div>
    </div>
</div>
@code {
    /// <summary>
    /// the title of the note
    /// </summary>
    string? title {get; set;}
    /// <summary>
    /// the text content of the note
    /// </summary>
    string? text {get; set;}
    /// <summary>
    /// Title of note used for comparison for deletion of note
    /// </summary>
    string? noteTitle {get; set;}
    /// <summary>
    /// Title of note picked to add a refrence to 
    /// </summary>
    string? noteForRefrence {get; set;}
    /// <summary>
    /// The selected reference to add to the note
    /// </summary>
    string? selectedRefrence {get; set;}
    /// <summary>
    /// Makes sure when the page starts it fills the AllRefrences array with all possible refrences shouldnt be more than 11
    /// </summary>
    protected override void OnInitialized()
    {
        notes.InitalizeAllRefrences(player, monster, weapons, potions);
    }
    /// <summary>
    /// Creates a new note and sets the title to the chosen title and text to the chosen text and creates a empty refrences list
    /// then it sets the title and text to null. if the title is null or empty then it sets the title to default title and continues.
    /// then calls the CreateNote method and clears the title and text
    /// </summary>
    private async Task MakeNote(){
        if(title == null || title == ""){
            title = $"default title{notes.EmptyTitle}";
            notes.EmptyTitle += 1;
        }
        Note toAdd = new Note{
                Title = title,
                Text = text,
                Refrences = new()
            };
        notes.CreateNote(toAdd);
        title = "";
        text = "";
    }
    /// <summary>
    /// Checks if notes is null or 0 and does a quick return if so
    /// Then it creates a new note called notetodelete and checks if the noteTitle is empty or null this happens if the note to be deleted is the first note in the list so it sets the note to the first note
    /// Then it checks if the note is valid and if so it deletes the note and clears the note title
    /// </summary>
    private async Task DeleteNote(){
        if (notes.AllNotes == null || notes.AllNotes.Count == 0){
            return;
        }
        Note noteToDelete = new();
        if (noteTitle == null || noteTitle == ""){
            noteToDelete = notes.AllNotes[0];
        }
        else{
            foreach (var note in notes.AllNotes){
                if (note?.Title?.Trim() == noteTitle.Trim()){
                    noteToDelete = note;
                    break;
                }
            }
        }
        notes.DeleteNote(noteToDelete);
        noteTitle = "";
    }
    /// <summary>
    /// Checks if notes is 0 if so does a quick return
    /// then checks if the note that is geting the refrence is empty or null same case as the delete not it sets it to the first note
    /// then it checks if the selectedRefrence is empty or null and sets it to the first refrence which is player
    /// then it checks if the titles match and if they do it adds the refrence
    /// </summary>
    private async Task AddRefrence()
    {
        if(notes.AllNotes.Count == 0){
            return;
        }
        if (noteForRefrence == null || noteForRefrence == ""){
            noteForRefrence = notes.AllNotes[0].Title;
        }
        if (selectedRefrence == null || selectedRefrence == ""){
            selectedRefrence = "Player";
        }
        foreach (var note in notes.AllNotes){
            if (note?.Title?.Trim() == noteForRefrence)
            {
                note?.Refrences?.Add(selectedRefrence);
            }
        }
    }
}